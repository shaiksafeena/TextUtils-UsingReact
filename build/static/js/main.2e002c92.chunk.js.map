{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/About.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","dist","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","value","backgroundColor","onChange","e","target","rows","newText","toUpperCase","showAlert","toLowerCase","array","split","forEach","element","word","charAt","slice","push","join","document","getElementById","select","navigator","clipboard","writeText","length","AboutUs","myStyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","aria-labelledby","data-bs-parent","border","Alert","alert","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","component_Alert","react_router_dist","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.2e002c92.chunk.js","sourcesContent":["import React from 'react'\r\nimport proptypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n          </li>\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-info\" type=\"submit\">Search</button>\r\n        </form> */}\r\n         <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className='form-check-input'onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className='form-check-label'  htmlFor='flexSwitchCheckChecked'>Enable Dark mode</label>\r\n    </div>\r\n      </div>\r\n    </div>\r\n   \r\n  </nav>\r\n\r\n  )\r\n}\r\nNavbar.propTypes={\r\n    title: proptypes.string,\r\n    about: proptypes.string    \r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState('');\r\n  const handleUpClick=()=>{\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  }\r\n  const handleLowClick=()=>{\r\n    let newText=text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n\r\n  }\r\n  const handleOnChange=(e)=>{\r\n    // console.log(\"Onchange\");\r\n    setText(e.target.value);\r\n  }\r\n  const handleClearClick=()=>{\r\n    let newText=\"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Is Cleared\",\"success\");\r\n\r\n  }\r\n  const handleCamelCase=()=> {\r\n    let array = text.split(\" \");\r\n    let newText = [];\r\n    array.forEach(element => {\r\n        let word = element.charAt(0).toUpperCase() + element.slice(1);\r\n        newText.push(word);\r\n\r\n      });\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Converted to CamelCase\",\"success\");\r\n\r\n  }\r\n  const handleSentenceCase=()=> {\r\n    let array = text.split(\".\");\r\n    let newText = [];\r\n    array.forEach(element => {\r\n        let word = element.charAt(0).toUpperCase() + element.slice(1);\r\n        newText.push(word)\r\n    });\r\n    setText(newText.join(\".\"));\r\n    props.showAlert(\"Converted to SentenceCase\",\"success\");\r\n\r\n  }\r\n  const handleCopyClick=()=>{\r\n    let newText=document.getElementById(\"myBox\");\r\n    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    props.showAlert(\"Text Is Copied\",\"success\");\r\n\r\n  }\r\n  return (\r\n  <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>Enter Your Text To Analysis Here!</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} style={{backgroundColor : props.mode==='dark'?'#042743':'white',color:props.mode==='dark'?'white':'black'}}onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\"onClick={handleLowClick}>Convert to Lowercase</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\"onClick={handleCamelCase}>Convert to Camel Case</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\"onClick={handleSentenceCase}>Convert to Sentence Case</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\"onClick={handleClearClick}>Clear Text</button>\r\n        <button type=\"button\" className=\"btn btn-primary mx-1\"onClick={handleCopyClick}>Copy Text</button>\r\n\r\n\r\n\r\n    </div>\r\n    <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n    <h1>Your Text Summary </h1>\r\n    <p>Your text contains {text.split(\" \").length-1}words and {text.length}characters.</p>\r\n    <p>Your text can be read in {0.008 * text.split(\" \").length}Minutes.</p>\r\n    <h1>Preview</h1>\r\n    <p>{text.length>0?text:\"Enter Something In The TextArea To Preview Here:)\"}</p>\r\n\r\n    </div>\r\n  </>\r\n\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function AboutUs() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({ \r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n                \r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({ \r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word;\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg} \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport About from './component/About';\nimport React, { useState } from 'react';\nimport Alert from './component/Alert';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    <Router>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Routes>\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          <Route exact path=\"/about\" element={<About/>}/>            \n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert}  mode={mode}/>}/> \n    </Routes>\n    </div>\n    </Router>\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}